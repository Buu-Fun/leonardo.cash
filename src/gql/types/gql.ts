/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  mutation LoginChallenge($account: String!) {\n    loginChallenge(account: $account) {\n      ... on LoginChallenge {\n        input {\n          address\n          nonce\n        }\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.LoginChallengeDocument,
    "\n  mutation LoginAuth($output: SolanaSignInOutput!, $input: SolanaSignInInput!) {\n    loginAuth(output: $output, input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.LoginAuthDocument,
    "\n  mutation LoginRefresh($input: LoginRefreshInput!) {\n    loginRefresh(input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.LoginRefreshDocument,
    "\n  query Me {\n    me {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.MeDocument,
    "\n  mutation DisconnectTwitter {\n    disconnectTwitter {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.DisconnectTwitterDocument,
    "\n  mutation DisconnectTelegram {\n    disconnectTelegram {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n": types.DisconnectTelegramDocument,
    "\n  mutation GenerateSubthread(\n    $prompt: String!\n    $style: SubthreadStyle\n    $threadId: String\n  ) {\n    generateSubthread(prompt: $prompt, style: $style, threadId: $threadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GenerateSubthreadDocument,
    "\n  mutation GenerateImage($subthreadId: String!) {\n    generateImage(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GenerateImageDocument,
    "\n  mutation GenerateModel($imageRequestId: String!, $subthreadId: String!) {\n    generateModel(imageRequestId: $imageRequestId, subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GenerateModelDocument,
    "\n  query GetThreads($pagination: Pagination, $filters: ThreadFilter) {\n    getThreads(pagination: $pagination, filters: $filters) {\n      ... on ThreadsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          address\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GetThreadsDocument,
    "\n  query GetSubthreads($pagination: Pagination, $filters: SubthreadFilter) {\n    getSubthreads(pagination: $pagination, filters: $filters) {\n      ... on SubthreadsPage {\n        items {\n          _id\n          address\n          createdAt\n          updatedAt\n          address\n          threadId\n          prompt\n          style\n          imageRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n          modelRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GetSubthreadsDocument,
    "\n  query GetSubthread($subthreadId: String!) {\n    getSubthread(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n": types.GetSubthreadDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginChallenge($account: String!) {\n    loginChallenge(account: $account) {\n      ... on LoginChallenge {\n        input {\n          address\n          nonce\n        }\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginChallenge($account: String!) {\n    loginChallenge(account: $account) {\n      ... on LoginChallenge {\n        input {\n          address\n          nonce\n        }\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginAuth($output: SolanaSignInOutput!, $input: SolanaSignInInput!) {\n    loginAuth(output: $output, input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginAuth($output: SolanaSignInOutput!, $input: SolanaSignInInput!) {\n    loginAuth(output: $output, input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginRefresh($input: LoginRefreshInput!) {\n    loginRefresh(input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginRefresh($input: LoginRefreshInput!) {\n    loginRefresh(input: $input) {\n      ... on LoginAuth {\n        token\n        tokenExpiry\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DisconnectTwitter {\n    disconnectTwitter {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DisconnectTwitter {\n    disconnectTwitter {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DisconnectTelegram {\n    disconnectTelegram {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DisconnectTelegram {\n    disconnectTelegram {\n      ... on Account {\n        address\n        twitterId\n        twitterName\n        twitterUsername\n        twitterAvatar\n        telegramId\n        telegramName\n        telegramUsername\n        telegramAvatar\n        solanaPubKey\n        createdAt\n        updatedAt\n      }\n      ... on Error {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateSubthread(\n    $prompt: String!\n    $style: SubthreadStyle\n    $threadId: String\n  ) {\n    generateSubthread(prompt: $prompt, style: $style, threadId: $threadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateSubthread(\n    $prompt: String!\n    $style: SubthreadStyle\n    $threadId: String\n  ) {\n    generateSubthread(prompt: $prompt, style: $style, threadId: $threadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateImage($subthreadId: String!) {\n    generateImage(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateImage($subthreadId: String!) {\n    generateImage(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateModel($imageRequestId: String!, $subthreadId: String!) {\n    generateModel(imageRequestId: $imageRequestId, subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateModel($imageRequestId: String!, $subthreadId: String!) {\n    generateModel(imageRequestId: $imageRequestId, subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetThreads($pagination: Pagination, $filters: ThreadFilter) {\n    getThreads(pagination: $pagination, filters: $filters) {\n      ... on ThreadsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          address\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetThreads($pagination: Pagination, $filters: ThreadFilter) {\n    getThreads(pagination: $pagination, filters: $filters) {\n      ... on ThreadsPage {\n        items {\n          _id\n          createdAt\n          updatedAt\n          address\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSubthreads($pagination: Pagination, $filters: SubthreadFilter) {\n    getSubthreads(pagination: $pagination, filters: $filters) {\n      ... on SubthreadsPage {\n        items {\n          _id\n          address\n          createdAt\n          updatedAt\n          address\n          threadId\n          prompt\n          style\n          imageRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n          modelRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSubthreads($pagination: Pagination, $filters: SubthreadFilter) {\n    getSubthreads(pagination: $pagination, filters: $filters) {\n      ... on SubthreadsPage {\n        items {\n          _id\n          address\n          createdAt\n          updatedAt\n          address\n          threadId\n          prompt\n          style\n          imageRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n          modelRequests {\n            _id\n            status\n            metadata\n            type\n            images {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            model_mesh {\n              content_type\n              file_name\n              file_size\n              url\n            }\n            timings {\n              inference\n            }\n          }\n        }\n        metadata {\n          limit\n          offset\n          orderBy\n          orderDirection\n          numElements\n          page\n          pages\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSubthread($subthreadId: String!) {\n    getSubthread(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSubthread($subthreadId: String!) {\n    getSubthread(subthreadId: $subthreadId) {\n      ... on Subthread {\n        _id\n        address\n        createdAt\n        updatedAt\n        threadId\n        prompt\n        style\n        imageRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n        modelRequests {\n          _id\n          status\n          metadata\n          type\n          images {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          model_mesh {\n            content_type\n            file_name\n            file_size\n            url\n          }\n          timings {\n            inference\n          }\n        }\n      }\n      ... on HandledError {\n        code\n        message\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;